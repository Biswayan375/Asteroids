// The Spaceship class
function Spaceship(x, y, r){
    this.position = createVector(x, y);
    this.r = r;
    this.rotation = 0;
    this.heading = 0;
    this.isThrusting = false;
    this.accelaration = createVector(0, 0);
    this.velocity = createVector(0, 0);
    this.accelarationScalingFactor = 0.05; // Accelaration Scaling Factor reduces the accelaration generated by the force at that direction by (100 - x)% where x is the value stored in it.
    this.accelarationDampingFactor = 0.9; // Accelaration Damping Factor damps the accelaration by (100 - x)% where x is its value when force is not being applied.

    // Renders the ship
    this.render = function(){
        push();
        if(this.position.y + this.r < 0){
            this.position.y = height + this.r;
            this.position.x = width - this.position.x;
        }
        if(this.position.y - this.r > height){
            this.position.x = width - this.position.x;
            this.position.y = -this.r;
        }
        if(this.position.x - this.r > width){
            this.position.x = -this.r;
            this.position.y = height - this.position.y;
        }
        if(this.position.x + this.r < 0){
            this.position.x = width + this.r;
            this.position.y = height - this.position.y;
        }
        translate(this.position.x, this.position.y);
        this.turn();
        rotate(this.heading);
        if(this.isThrusting){
            this.getForce();
            // this.drawFlagOnThurst();
        }
        this.thrust();
        stroke(255);
        fill(255);
        triangle(0, -this.r, this.r, this.r, -this.r, this.r);
        pop();
    }

    // Sets the angular velocity
    this.setRotation = function(a){
        this.rotation = a;
    }

    // Turns the ship at present angular velocity
    this.turn = function(){
        this.heading += this.rotation;
    }

    // Gives a thrust at the oppposite direction of the direction it is heading
    this.thrust = function(){
        if(this.isThrusting)
            this.velocity.add(this.accelaration);
        if(this.accelaration.x != 0 || this.accelaration.y != 0) this.accelaration.mult(this.accelarationDampingFactor);
        this.position.add(this.velocity);
    }

    // Sets the accelaration at a specific direction by giving a force at that direction
    this.getForce = function(){
        var v = p5.Vector.fromAngle(this.heading - (PI / 2), 2);
        this.accelaration.add(v).mult(this.accelarationScalingFactor);
    }

    this.drawFlagOnThurst = function(){
        var spreadingFactor = 2;
        /*thrustBubble.push(new ThurstFlagBubble(this.r, this.r - 12, "orange"));
        thrustBubble.push(new ThurstFlagBubble(this.r - 12, this.r - 26, "white"));
        thrustBubble.push(new ThurstFlagBubble(this.r - 26, this.r - 39, "green"));*/
        noStroke();
        fill("orange");
        for(var i = 0; i < 10; i++){
            circle(random(this.r + (i * spreadingFactor), this.r - 12 - (i * spreadingFactor)), 23 + (i * 5), 10, 10);
        }
        fill("white");
        for(var i = 0; i < 10; i++){
            circle(random(this.r - 12 + (i * spreadingFactor), this.r - 26 - (i * spreadingFactor)), 23 + (i * 5), 10, 10);
        }
        fill("green");
        for(var i = 0; i < 10; i++){
            circle(random(this.r - 26 + (i * spreadingFactor), this.r - 39 - (i * spreadingFactor)), 23 + (i * 5), 10, 10);
        }
    }
}

function ThurstFlagBubble(x, y, c){
    this.x = x;
    this.y = y;
    this.col = c;
    this.diameter = 10;
    
    this.render = function(){
        fill(this.col);
        circle(this.x, this.y, this.diameter, this.diameter);
    }
}